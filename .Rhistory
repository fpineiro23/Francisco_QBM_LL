hvg
some_numbers.integers <- 1:10
some_numbers.integers <- 1:10
class(some_numbers.integers)
some_numbers.integers <- 1:10
class(some_numbers.integers)
some_numbers.integers <- 1:10
class(some_numbers.integers)
value_of_pi <- pi
class(value_of_pi)
pi_plus <- some_numbers.integers + value_of_pi
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
setwd("~/GitHub/QMB6316F24/demo_05_data_in_R")
data(cars)
(cars_df)
summary(cars_df)
summary(cars_df)
write.table(cars, file = 'cars.txt')
cars_df <- read.table(file = 'cars.txt')
summary(cars_df)
data(iris)
write.csv(iris, file = 'iris.csv')
iris_df <- read.csv(file = 'iris.csv')
write.csv(iris, file = 'iris.csv')
iris_df <- read.csv(file = 'iris.csv')
View(iris_df)
View(iris_df)
View(iris_df)
View(iris_df)
View(iris_df)
setwd("~/GitHub/QMB6316F24/demo_04_R_intro")
housing_data_3 <- read.csv(file = 'housing_data.csv')
summary(housing_data_3)
plot(housing_data_3[, 'income'],
housing_data_3[, 'house_price'],
main = c('House Prices vs. Income', '(all figures in millions)'),
xlab = 'Income',
ylab = 'House Prices',
col = 'blue')
corr_matrix <- cor(housing_data_3[, c('house_price', 'income', 'in_cali', 'earthquake')])
print(round(corr_matrix, 3))
lm_model_3 <- lm(data = housing_data_3,
formula = house_price ~ income + in_cali + earthquake)
summary(lm_model_3)
setwd("~/GitHub/QMB6316F24/demo_04_R_intro")
rm(list=ls(all=TRUE))
setwd("~/GitHub/QMB6316F24/demo_04_R_intro")
getwd()
source('../tools/sim_tools.R')
beta_0          <-   0.10    # Intercept
beta_income     <-   5.00    # Slope coefficient for income
beta_cali       <-   0.25    # Slope coefficient for California
beta_earthquake <- - 0.50    # Slope coefficient for earthquake
beta_0          <-   0.10    # Intercept
beta_income     <-   5.00    # Slope coefficient for income
beta_cali       <-   0.25    # Slope coefficient for California
beta_earthquake <- - 0.50    # Slope coefficient for earthquake
# beta_earthquake <- - 0.00    # Slope coefficient for earthquake
# Distribution of incomes (also in millions).
avg_income <- 0.1
sd_income <- 0.01
# Fraction of dataset in California.
pct_in_cali <- 0.5
# Frequency of earthquakes (only in California).
prob_earthquake <- 0.05
# Additional terms:
sigma_2 <- 0.1      # Variance of error term
num_obs <- 100      # Number of observations in dataset
housing_data <- housing_sample(beta_0, beta_income, beta_cali, beta_earthquake,
avg_income, sd_income, pct_in_cali, prob_earthquake,
sigma_2, num_obs)
summary(housing_data)
table(housing_data[, 'in_cali'], housing_data[, 'earthquake'])
lm_model <- lm(data = housing_data,
formula = house_price ~ income + in_cali + earthquake)
summary(lm_model)
housing_data_2 <- housing_sample(beta_0, beta_income, beta_cali, beta_earthquake,
avg_income, sd_income, pct_in_cali, prob_earthquake,
sigma_2, num_obs)
write.csv(housing_data_2, file = 'housing_data_2.csv')
housing_data_3 <- read.csv(file = 'housing_data_2.csv')
lm_model_3 <- lm(data = housing_data_3,
formula = house_price ~ income + in_cali + earthquake)
summary(lm_model_3)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
setwd("~/GitHub/QMB6316F24/assignment_02")
source('../tools/sim_tools.R')
beta_0          <-   50000     # Intercept
beta_mileage    <- -  0.20     # Slope coefficient for mileage
beta_accident   <- -  5000     # Slope coefficient for accident
beta_damage     <- - 20000     # Slope coefficient for damage
# beta_damage     <-       0   # Alternate Slope coefficient for damage
# Distribution of mileage.
avg_mileage <- 50000
sd_mileage  <- 10000
# Fraction of dataset in an accident.
pct_accident <- 0.4
# Frequency of damages (only after an accident).
prob_damage <- 0.10
# Additional terms:
sigma_2 <- 4000    # Variance of error term
num_obs <- 100      # Number of observations in dataset
# Call the other_sample function from sim_tools.R.
car_data <- other_sample(beta_0, beta_mileage, beta_accident, beta_damage,
avg_mileage, sd_mileage, pct_accident, prob_damage,
sigma_2, num_obs)
# Summarize the data to inspect for data quality.
summary(car_data)
# Check that damages occurred only in accident:
table(car_data[, 'accident'], car_data[, 'damage'])
lm_full_model <- lm(data = car_data,
formula = car_price ~ mileage + accident + damage)
summary(lm_full_model)
setwd("~/GitHub/Francisco_QBM_LL/assignment_02")
lm_no_damages <- lm(data = car_data,
formula = car_price ~ mileage + accident) # damage removed.
# Output the results to screen.
summary(lm_no_damages)
setwd("~/GitHub/Francisco_QBM_LL")
b. Compare the estimated coefficient for ```ACCIDENT```
getwd()
getwd()
# Dependent Variable: Automobile values
beta_0          <-   50000     # Intercept
beta_mileage    <- -  0.20     # Slope coefficient for mileage
beta_accident   <- -  5000     # Slope coefficient for accident
beta_damage     <- - 20000     # Slope coefficient for damage
# beta_damage     <-       0   # Alternate Slope coefficient for damage
# Distribution of mileage.
avg_mileage <- 50000
sd_mileage  <- 10000
# Fraction of dataset in an accident.
pct_accident <- 0.4
# Frequency of damages (only after an accident).
prob_damage <- 0.10
# Additional terms:
sigma_2 <- 4000    # Variance of error term
num_obs <- 100      # Number of observations in dataset
##################################################
# Generating the Data
##################################################
# Call the other_sample function from sim_tools.R.
car_data <- other_sample(beta_0, beta_mileage, beta_accident, beta_damage,
avg_mileage, sd_mileage, pct_accident, prob_damage,
sigma_2, num_obs)
# Summarize the data to inspect for data quality.
summary(car_data)
# Check that damages occurred only in accident:
table(car_data[, 'accident'], car_data[, 'damage'])
# Data errors are the most frequent cause of problems in model-building.
# Run it again if no damages occurred.
##################################################
# Estimating the Regression Model
# Model 1: All Variables Included
##################################################
# Estimate a regression model.
lm_full_model <- lm(data = car_data,
formula = car_price ~ mileage + accident + damage)
# Output the results to screen.
summary(lm_full_model)
##################################################
# Estimating the Regression Model
# Model 2: Omitting One Variable
##################################################
# Estimate a regression model.
lm_no_damages <- lm(data = car_data,
formula = car_price ~ mileage + accident) # damage removed.
# Output the results to screen.
summary(lm_no_damages)
##################################################
#
# Exercise:
#
# Observe the values of the coefficient for damage.
# Then compare the change in coefficient on accidents
# with and without the damage variable.
#
# Then set the damage coefficient to zero and repeat the exercise.
# Compare the change in coefficient on accidents
# with and without the damage variable.
#
##################################################
##################################################
# End
##################################################
lm_full_model <- lm(data = car_data,
formula = car_price ~ mileage + accident + damage)
# Output the results to screen.
summary(lm_full_model)
lm_no_damages <- lm(data = car_data,
formula = car_price ~ mileage + accident) # damage removed.
# Output the results to screen.
summary(lm_no_damages)
car_data <- other_sample(beta_0, beta_mileage, beta_accident, beta_damage,
avg_mileage, sd_mileage, pct_accident, prob_damage,
sigma_2, num_obs)
# Summarize the data to inspect for data quality.
summary(car_data)
# Check that damages occurred only in accident:
table(car_data[, 'accident'], car_data[, 'damage'])
# Data errors are the most frequent cause of problems in model-building.
# Run it again if no damages occurred.
##################################################
# Estimating the Regression Model
# Model 1: All Variables Included
##################################################
# Estimate a regression model.
lm_full_model <- lm(data = car_data,
formula = car_price ~ mileage + accident + damage)
# Output the results to screen.
summary(lm_full_model)
##################################################
# Estimating the Regression Model
# Model 2: Omitting One Variable
##################################################
# Estimate a regression model.
lm_no_damages <- lm(data = car_data,
formula = car_price ~ mileage + accident) # damage removed.
# Output the results to screen.
summary(lm_no_damages)
##################################################
#
# Exercise:
#
# Observe the values of the coefficient for damage.
# Then compare the change in coefficient on accidents
# with and without the damage variable.
#
# Then set the damage coefficient to zero and repeat the exercise.
# Compare the change in coefficient on accidents
# with and without the damage variable.
#
##################################################
##################################################
# End
##################################################
